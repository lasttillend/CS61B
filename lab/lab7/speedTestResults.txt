1. Insert in random order
length of each string = 10
(1) # strings = 1000
class ULLMap: 0.02 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec

(2) # strings = 10000
class ULLMap: 0.44 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.01 sec

(3) # strings = 100000
class ULLMap: --Stack Overflow -- couldn't add 100000 strings of length 10.
class BSTMap: 0.10 sec
Java's Built-in TreeMap: 0.09 sec

(4) # strings = 1000000
class ULLMap: --Stack Overflow -- couldn't add 1000000 strings of length 10.
class BSTMap: 2.38 sec
Java's Built-in TreeMap: 1.81 sec

2. Insert in order
(1) # strings = 1000
class ULLMap: 0.03 sec
class BSTMap: 0.03 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.00 sec

(2) # strings = 10000
class ULLMap: 0.72 sec
class BSTMap: 1.35 sec
Java's Built-in TreeMap: 0.02 sec
Java's Built-in HashMap: 0.01 sec

(3) # strings = 100000
--Stack Overflow -- couldn't add 100000 strings.
--Stack Overflow -- couldn't add 100000 strings.
Java's Built-in TreeMap: 0.09 sec
Java's Built-in HashMap: 0.07 sec

Observation:
If we insert strings in order, then the height of our BST increases linearly, causing the tree to be unbalanced.
